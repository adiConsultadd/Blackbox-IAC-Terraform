[0m[1mmodule.lambda_layers.data.archive_file.layer_zips["layer3"]: Reading...[0m[0m
[0m[1mmodule.drafting.module.lambda["drafting-toc-enrichment"].data.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mmodule.drafting.module.lambda["drafting-toc-regenerate"].data.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mmodule.lambda_layers.data.archive_file.layer_zips["layer1"]: Reading...[0m[0m
[0m[1mmodule.lambda_layers.data.archive_file.layer_zips["layer2"]: Reading...[0m[0m
[0m[1mmodule.drafting.module.lambda["drafting-table-of-content"].data.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mmodule.drafting.module.lambda["drafting-system-summary"].data.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mmodule.drafting.module.lambda["drafting-summary"].data.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mmodule.lambda_layers.data.archive_file.layer_zips["layer4"]: Reading...[0m[0m
[0m[1mmodule.lambda_layers.data.archive_file.layer_zips["layer3"]: Read complete after 0s [id=3f671f50fdb728fca780e1567c9156a847a63d2a][0m
[0m[1mmodule.drafting.module.lambda["drafting-toc-regenerate"].data.archive_file.lambda_zip: Read complete after 0s [id=63079bc56e0ca79df928b09ac97ebc8e4b210513][0m
[0m[1mmodule.drafting.module.lambda["drafting-summary"].data.archive_file.lambda_zip: Read complete after 0s [id=63079bc56e0ca79df928b09ac97ebc8e4b210513][0m
[0m[1mmodule.lambda_layers.data.archive_file.layer_zips["layer4"]: Read complete after 0s [id=79da4336e9cfc0665a5ea06797d32dc28b1155a9][0m
[0m[1mmodule.lambda_layers.data.archive_file.layer_zips["layer2"]: Read complete after 0s [id=80beb3c4e5fe5fccd85a728c1278fe636367f240][0m
[0m[1mmodule.drafting.module.lambda["drafting-table-of-content"].data.archive_file.lambda_zip: Read complete after 0s [id=63079bc56e0ca79df928b09ac97ebc8e4b210513][0m
[0m[1mmodule.drafting.module.lambda["drafting-company-data"].data.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mmodule.drafting.module.lambda["drafting-toc-enrichment"].data.archive_file.lambda_zip: Read complete after 0s [id=63079bc56e0ca79df928b09ac97ebc8e4b210513][0m
[0m[1mmodule.drafting.module.lambda["drafting-user-preference"].data.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mmodule.lambda_layers.data.archive_file.layer_zips["layer1"]: Read complete after 0s [id=582d4a3fc3216f8648d6348f5298fabbbb6936a1][0m
[0m[1mmodule.drafting.module.lambda["drafting-system-summary"].data.archive_file.lambda_zip: Read complete after 0s [id=63079bc56e0ca79df928b09ac97ebc8e4b210513][0m
[0m[1mmodule.costing.module.lambda["costing-hourly-wages"].data.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mmodule.costing.module.lambda["costing-hourly-wages-result"].data.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mmodule.costing.module.lambda["costing-rfp-cost-image-extractor"].data.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mmodule.drafting.module.lambda["drafting-section-content"].data.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mmodule.costing.module.lambda["costing-rfp-license"].data.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mmodule.drafting.module.lambda["drafting-extract-text"].data.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mmodule.drafting.module.lambda["drafting-company-data"].data.archive_file.lambda_zip: Read complete after 0s [id=63079bc56e0ca79df928b09ac97ebc8e4b210513][0m
[0m[1mmodule.drafting.module.lambda["drafting-user-preference"].data.archive_file.lambda_zip: Read complete after 0s [id=63079bc56e0ca79df928b09ac97ebc8e4b210513][0m
[0m[1mmodule.drafting.module.lambda["drafting-content-regeneration"].data.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mmodule.drafting.module.lambda["drafting-section-content"].data.archive_file.lambda_zip: Read complete after 0s [id=63079bc56e0ca79df928b09ac97ebc8e4b210513][0m
[0m[1mmodule.costing.module.lambda["costing-rfp-infrastructure"].data.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mmodule.costing.module.lambda["costing-rfp-cost-image-calculation"].data.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mmodule.costing.module.lambda["costing-rfp-cost-image-extractor"].data.archive_file.lambda_zip: Read complete after 0s [id=89bf19830ea852308ffa1bb18ca2c62f83f414be][0m
[0m[1mmodule.costing.module.lambda["costing-rfp-license"].data.archive_file.lambda_zip: Read complete after 0s [id=00b0e81f039ca3d3aba88a16a08dbc219d1db72a][0m
[0m[1mmodule.costing.module.lambda["costing-rfp-cost-regenerating"].data.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mmodule.costing.module.lambda["costing-hourly-wages"].data.archive_file.lambda_zip: Read complete after 0s [id=6b717b68f0a88ec6735bf27e6dac38d81209e53a][0m
[0m[1mmodule.costing.module.lambda["costing-hourly-wages-result"].data.archive_file.lambda_zip: Read complete after 0s [id=0378a32b3ec120248b6c5f98a21a3ccbcfc4cc01][0m
[0m[1mmodule.drafting.module.lambda["drafting-extract-text"].data.archive_file.lambda_zip: Read complete after 0s [id=63079bc56e0ca79df928b09ac97ebc8e4b210513][0m
[0m[1mmodule.drafting.module.lambda["drafting-content-regeneration"].data.archive_file.lambda_zip: Read complete after 0s [id=63079bc56e0ca79df928b09ac97ebc8e4b210513][0m
[0m[1mmodule.costing.module.lambda["costing-rfp-cost-image-calculation"].data.archive_file.lambda_zip: Read complete after 0s [id=cc1e56856c5a3a1a4a74bda12f2d5e68c3c16b7d][0m
[0m[1mmodule.costing.module.lambda["costing-rfp-cost-formating"].data.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mmodule.costing.module.lambda["costing-rfp-cost-summary"].data.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mmodule.costing.module.lambda["costing-rfp-infrastructure"].data.archive_file.lambda_zip: Read complete after 0s [id=71b6ddc077d12b69a9f28180447716527158e382][0m
[0m[1mmodule.costing.module.lambda["costing-rfp-cost-regenerating"].data.archive_file.lambda_zip: Read complete after 0s [id=7bd33192cfd854fa904a2a3ecfdbb057dfa51a61][0m
[0m[1mmodule.costing.module.lambda["costing-rfp-cost-formating"].data.archive_file.lambda_zip: Read complete after 0s [id=59a79a0a26d6b2dd5e22de878348996ab135ac73][0m
[0m[1mmodule.costing.module.lambda["costing-rfp-cost-summary"].data.archive_file.lambda_zip: Read complete after 0s [id=159ef329f4b0b4c42b81c59c92c8f6e94032e6de][0m
[0m[1mdata.aws_region.current: Reading...[0m[0m
[0m[1mdata.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mdata.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.sourcing.module.lambda["sourcing-lambda-2"].data.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mmodule.sourcing.module.lambda["sourcing-lambda-1"].data.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mmodule.sourcing.module.lambda["sourcing-lambda-3"].data.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mmodule.sourcing.module.lambda["sourcing-lambda-2"].data.archive_file.lambda_zip: Read complete after 0s [id=356085860246c5587dcabd94bcbbcc0e8d49c508][0m
[0m[1mmodule.sourcing.module.lambda["sourcing-lambda-1"].data.archive_file.lambda_zip: Read complete after 0s [id=63079bc56e0ca79df928b09ac97ebc8e4b210513][0m
[0m[1mmodule.sourcing.module.lambda["sourcing-lambda-3"].data.archive_file.lambda_zip: Read complete after 0s [id=c16538a7725d5889640ea3979410af280a62b4aa][0m
[0m[1mdata.aws_caller_identity.current: Read complete after 0s [id=133528580579][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # module.elasticache.aws_elasticache_cluster.this[0m will be created
[0m  [32m+[0m[0m resource "aws_elasticache_cluster" "this" {
      [32m+[0m[0m apply_immediately          = (known after apply)
      [32m+[0m[0m arn                        = (known after apply)
      [32m+[0m[0m auto_minor_version_upgrade = "true"
      [32m+[0m[0m availability_zone          = (known after apply)
      [32m+[0m[0m az_mode                    = (known after apply)
      [32m+[0m[0m cache_nodes                = (known after apply)
      [32m+[0m[0m cluster_address            = (known after apply)
      [32m+[0m[0m cluster_id                 = "blackbox-dev-redis"
      [32m+[0m[0m configuration_endpoint     = (known after apply)
      [32m+[0m[0m engine                     = "redis"
      [32m+[0m[0m engine_version             = "7.0"
      [32m+[0m[0m engine_version_actual      = (known after apply)
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m ip_discovery               = (known after apply)
      [32m+[0m[0m maintenance_window         = (known after apply)
      [32m+[0m[0m network_type               = (known after apply)
      [32m+[0m[0m node_type                  = "cache.t2.micro"
      [32m+[0m[0m num_cache_nodes            = 1
      [32m+[0m[0m parameter_group_name       = "default.redis7"
      [32m+[0m[0m port                       = 6379
      [32m+[0m[0m preferred_outpost_arn      = (known after apply)
      [32m+[0m[0m replication_group_id       = (known after apply)
      [32m+[0m[0m security_group_ids         = (known after apply)
      [32m+[0m[0m snapshot_window            = (known after apply)
      [32m+[0m[0m subnet_group_name          = "blackbox-dev-redis-sng"
      [32m+[0m[0m tags                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "blackbox-dev-redis"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all                   = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "blackbox-dev-redis"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m transit_encryption_enabled = (known after apply)
    }

[1m  # module.elasticache.aws_elasticache_subnet_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_elasticache_subnet_group" "this" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m description = "Managed by Terraform"
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "blackbox-dev-redis-sng"
      [32m+[0m[0m subnet_ids  = (known after apply)
      [32m+[0m[0m tags        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "blackbox-dev-redis-sng"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "blackbox-dev-redis-sng"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m vpc_id      = (known after apply)
    }

[1m  # module.lambda_layers.aws_lambda_layer_version.this["layer1"][0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_layer_version" "this" {
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m code_sha256                 = (known after apply)
      [32m+[0m[0m compatible_runtimes         = [
          [32m+[0m[0m "python3.9",
        ]
      [32m+[0m[0m created_date                = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m layer_arn                   = (known after apply)
      [32m+[0m[0m layer_name                  = "blackbox-dev-layer1"
      [32m+[0m[0m s3_bucket                   = (known after apply)
      [32m+[0m[0m s3_key                      = "layer1.zip"
      [32m+[0m[0m signing_job_arn             = (known after apply)
      [32m+[0m[0m signing_profile_version_arn = (known after apply)
      [32m+[0m[0m skip_destroy                = false
      [32m+[0m[0m source_code_hash            = "e3eJgwsbF061AKXSDODP/EOEQaqyIMCzANWwYG3dC50="
      [32m+[0m[0m source_code_size            = (known after apply)
      [32m+[0m[0m version                     = (known after apply)
    }

[1m  # module.lambda_layers.aws_lambda_layer_version.this["layer2"][0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_layer_version" "this" {
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m code_sha256                 = (known after apply)
      [32m+[0m[0m compatible_runtimes         = [
          [32m+[0m[0m "python3.9",
        ]
      [32m+[0m[0m created_date                = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m layer_arn                   = (known after apply)
      [32m+[0m[0m layer_name                  = "blackbox-dev-layer2"
      [32m+[0m[0m s3_bucket                   = (known after apply)
      [32m+[0m[0m s3_key                      = "layer2.zip"
      [32m+[0m[0m signing_job_arn             = (known after apply)
      [32m+[0m[0m signing_profile_version_arn = (known after apply)
      [32m+[0m[0m skip_destroy                = false
      [32m+[0m[0m source_code_hash            = "LbufV3LjUqavrXT8IyNvG3fHVCyljKpVyI8gTpb0GfI="
      [32m+[0m[0m source_code_size            = (known after apply)
      [32m+[0m[0m version                     = (known after apply)
    }

[1m  # module.lambda_layers.aws_lambda_layer_version.this["layer3"][0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_layer_version" "this" {
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m code_sha256                 = (known after apply)
      [32m+[0m[0m compatible_runtimes         = [
          [32m+[0m[0m "python3.9",
        ]
      [32m+[0m[0m created_date                = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m layer_arn                   = (known after apply)
      [32m+[0m[0m layer_name                  = "blackbox-dev-layer3"
      [32m+[0m[0m s3_bucket                   = (known after apply)
      [32m+[0m[0m s3_key                      = "layer3.zip"
      [32m+[0m[0m signing_job_arn             = (known after apply)
      [32m+[0m[0m signing_profile_version_arn = (known after apply)
      [32m+[0m[0m skip_destroy                = false
      [32m+[0m[0m source_code_hash            = "NB7hyfreF3WWra6mnrhZC5asisDc7DYdhYvZqm/v1Rk="
      [32m+[0m[0m source_code_size            = (known after apply)
      [32m+[0m[0m version                     = (known after apply)
    }

[1m  # module.lambda_layers.aws_lambda_layer_version.this["layer4"][0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_layer_version" "this" {
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m code_sha256                 = (known after apply)
      [32m+[0m[0m compatible_runtimes         = [
          [32m+[0m[0m "python3.9",
        ]
      [32m+[0m[0m created_date                = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m layer_arn                   = (known after apply)
      [32m+[0m[0m layer_name                  = "blackbox-dev-layer4"
      [32m+[0m[0m s3_bucket                   = (known after apply)
      [32m+[0m[0m s3_key                      = "layer4.zip"
      [32m+[0m[0m signing_job_arn             = (known after apply)
      [32m+[0m[0m signing_profile_version_arn = (known after apply)
      [32m+[0m[0m skip_destroy                = false
      [32m+[0m[0m source_code_hash            = "6YKiVUueWSYM1l9mnE4X2EpVtkbQJ+6iNJb9GHwBbVU="
      [32m+[0m[0m source_code_size            = (known after apply)
      [32m+[0m[0m version                     = (known after apply)
    }

[1m  # module.lambda_layers.aws_s3_bucket.lambda_layers[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "lambda_layers" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "blackbox-dev-lambda-layers"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)

      [32m+[0m[0m cors_rule (known after apply)

      [32m+[0m[0m grant (known after apply)

      [32m+[0m[0m lifecycle_rule (known after apply)

      [32m+[0m[0m logging (known after apply)

      [32m+[0m[0m object_lock_configuration (known after apply)

      [32m+[0m[0m replication_configuration (known after apply)

      [32m+[0m[0m server_side_encryption_configuration (known after apply)

      [32m+[0m[0m versioning (known after apply)

      [32m+[0m[0m website (known after apply)
    }

[1m  # module.lambda_layers.aws_s3_object.layer_objects["layer1"][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_object" "layer_objects" {
      [32m+[0m[0m acl                    = (known after apply)
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m bucket                 = (known after apply)
      [32m+[0m[0m bucket_key_enabled     = (known after apply)
      [32m+[0m[0m checksum_crc32         = (known after apply)
      [32m+[0m[0m checksum_crc32c        = (known after apply)
      [32m+[0m[0m checksum_crc64nvme     = (known after apply)
      [32m+[0m[0m checksum_sha1          = (known after apply)
      [32m+[0m[0m checksum_sha256        = (known after apply)
      [32m+[0m[0m content_type           = (known after apply)
      [32m+[0m[0m etag                   = "0595795c19f045489256821f035d512a"
      [32m+[0m[0m force_destroy          = false
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m key                    = "layer1.zip"
      [32m+[0m[0m kms_key_id             = (known after apply)
      [32m+[0m[0m server_side_encryption = (known after apply)
      [32m+[0m[0m source                 = "modules/base-infra/layers/build/layer1.zip"
      [32m+[0m[0m storage_class          = (known after apply)
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m version_id             = (known after apply)
    }

[1m  # module.lambda_layers.aws_s3_object.layer_objects["layer2"][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_object" "layer_objects" {
      [32m+[0m[0m acl                    = (known after apply)
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m bucket                 = (known after apply)
      [32m+[0m[0m bucket_key_enabled     = (known after apply)
      [32m+[0m[0m checksum_crc32         = (known after apply)
      [32m+[0m[0m checksum_crc32c        = (known after apply)
      [32m+[0m[0m checksum_crc64nvme     = (known after apply)
      [32m+[0m[0m checksum_sha1          = (known after apply)
      [32m+[0m[0m checksum_sha256        = (known after apply)
      [32m+[0m[0m content_type           = (known after apply)
      [32m+[0m[0m etag                   = "d9891957e13862dd78af42b28b10d912"
      [32m+[0m[0m force_destroy          = false
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m key                    = "layer2.zip"
      [32m+[0m[0m kms_key_id             = (known after apply)
      [32m+[0m[0m server_side_encryption = (known after apply)
      [32m+[0m[0m source                 = "modules/base-infra/layers/build/layer2.zip"
      [32m+[0m[0m storage_class          = (known after apply)
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m version_id             = (known after apply)
    }

[1m  # module.lambda_layers.aws_s3_object.layer_objects["layer3"][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_object" "layer_objects" {
      [32m+[0m[0m acl                    = (known after apply)
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m bucket                 = (known after apply)
      [32m+[0m[0m bucket_key_enabled     = (known after apply)
      [32m+[0m[0m checksum_crc32         = (known after apply)
      [32m+[0m[0m checksum_crc32c        = (known after apply)
      [32m+[0m[0m checksum_crc64nvme     = (known after apply)
      [32m+[0m[0m checksum_sha1          = (known after apply)
      [32m+[0m[0m checksum_sha256        = (known after apply)
      [32m+[0m[0m content_type           = (known after apply)
      [32m+[0m[0m etag                   = "500dbb68dbd3ada4ca4fdda5a973a78b"
      [32m+[0m[0m force_destroy          = false
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m key                    = "layer3.zip"
      [32m+[0m[0m kms_key_id             = (known after apply)
      [32m+[0m[0m server_side_encryption = (known after apply)
      [32m+[0m[0m source                 = "modules/base-infra/layers/build/layer3.zip"
      [32m+[0m[0m storage_class          = (known after apply)
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m version_id             = (known after apply)
    }

[1m  # module.lambda_layers.aws_s3_object.layer_objects["layer4"][0m will be created
[0m  [32m+[0m[0m resource "aws_s3_object" "layer_objects" {
      [32m+[0m[0m acl                    = (known after apply)
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m bucket                 = (known after apply)
      [32m+[0m[0m bucket_key_enabled     = (known after apply)
      [32m+[0m[0m checksum_crc32         = (known after apply)
      [32m+[0m[0m checksum_crc32c        = (known after apply)
      [32m+[0m[0m checksum_crc64nvme     = (known after apply)
      [32m+[0m[0m checksum_sha1          = (known after apply)
      [32m+[0m[0m checksum_sha256        = (known after apply)
      [32m+[0m[0m content_type           = (known after apply)
      [32m+[0m[0m etag                   = "decd599ebe65683fd5724e04fc35f9a2"
      [32m+[0m[0m force_destroy          = false
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m key                    = "layer4.zip"
      [32m+[0m[0m kms_key_id             = (known after apply)
      [32m+[0m[0m server_side_encryption = (known after apply)
      [32m+[0m[0m source                 = "modules/base-infra/layers/build/layer4.zip"
      [32m+[0m[0m storage_class          = (known after apply)
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m version_id             = (known after apply)
    }

[1m  # module.networking.aws_eip.nat[0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "nat" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = "vpc"
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m ipam_pool_id         = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m ptr_record           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "blackbox-dev-nat-eip"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "blackbox-dev-nat-eip"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m vpc                  = (known after apply)
    }

[1m  # module.networking.aws_internet_gateway.this[0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "this" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "blackbox-dev-igw"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "blackbox-dev-igw"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # module.networking.aws_nat_gateway.this[0m will be created
[0m  [32m+[0m[0m resource "aws_nat_gateway" "this" {
      [32m+[0m[0m allocation_id                      = (known after apply)
      [32m+[0m[0m association_id                     = (known after apply)
      [32m+[0m[0m connectivity_type                  = "public"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m network_interface_id               = (known after apply)
      [32m+[0m[0m private_ip                         = (known after apply)
      [32m+[0m[0m public_ip                          = (known after apply)
      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)
      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)
      [32m+[0m[0m subnet_id                          = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "blackbox-dev-nat-gw"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "blackbox-dev-nat-gw"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.networking.aws_route_table.private[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m nat_gateway_id             = (known after apply)
                [90m# (11 unchanged attributes hidden)[0m[0m
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "blackbox-dev-private-rt"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "blackbox-dev-private-rt"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.networking.aws_route_table.public[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "public" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m gateway_id                 = (known after apply)
                [90m# (11 unchanged attributes hidden)[0m[0m
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "blackbox-dev-public-rt"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "blackbox-dev-public-rt"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.networking.aws_route_table_association.private["0"][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.networking.aws_route_table_association.private["1"][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.networking.aws_route_table_association.public["0"][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.networking.aws_route_table_association.public["1"][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.networking.aws_security_group.elasticache[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "elasticache" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Allow traffic from Lambda to ElastiCache"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = "blackbox-dev-elasticache-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "blackbox-dev-elasticache-sg"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "blackbox-dev-elasticache-sg"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.networking.aws_security_group.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "lambda" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Allow all outbound traffic for Lambda"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = "blackbox-dev-lambda-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "blackbox-dev-lambda-sg"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "blackbox-dev-lambda-sg"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.networking.aws_security_group.rds[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "rds" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Allow traffic from Lambda to RDS"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = "blackbox-dev-rds-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "blackbox-dev-rds-sg"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "blackbox-dev-rds-sg"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.networking.aws_security_group_rule.allow_lambda_to_elasticache[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "allow_lambda_to_elasticache" {
      [32m+[0m[0m description              = "Allow Lambda to connect to ElastiCache"
      [32m+[0m[0m from_port                = 6379
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 6379
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.networking.aws_security_group_rule.allow_lambda_to_rds[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "allow_lambda_to_rds" {
      [32m+[0m[0m description              = "Allow Lambda to connect to RDS"
      [32m+[0m[0m from_port                = 5432
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 5432
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.networking.aws_subnet.private["0"][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.10.101.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "blackbox-dev-private-subnet-1"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "blackbox-dev-private-subnet-1"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.networking.aws_subnet.private["1"][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.10.102.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "blackbox-dev-private-subnet-2"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "blackbox-dev-private-subnet-2"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.networking.aws_subnet.public["0"][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.10.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "blackbox-dev-public-subnet-1"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "blackbox-dev-public-subnet-1"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.networking.aws_subnet.public["1"][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.10.2.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "blackbox-dev-public-subnet-2"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "blackbox-dev-public-subnet-2"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.networking.aws_vpc.this[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "this" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.10.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "blackbox-dev-vpc"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "blackbox-dev-vpc"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.rds.aws_db_instance.myrds[0m will be created
[0m  [32m+[0m[0m resource "aws_db_instance" "myrds" {
      [32m+[0m[0m address                               = (known after apply)
      [32m+[0m[0m allocated_storage                     = 10
      [32m+[0m[0m apply_immediately                     = false
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m auto_minor_version_upgrade            = true
      [32m+[0m[0m availability_zone                     = (known after apply)
      [32m+[0m[0m backup_retention_period               = (known after apply)
      [32m+[0m[0m backup_target                         = (known after apply)
      [32m+[0m[0m backup_window                         = (known after apply)
      [32m+[0m[0m ca_cert_identifier                    = (known after apply)
      [32m+[0m[0m character_set_name                    = (known after apply)
      [32m+[0m[0m copy_tags_to_snapshot                 = false
      [32m+[0m[0m database_insights_mode                = (known after apply)
      [32m+[0m[0m db_name                               = (known after apply)
      [32m+[0m[0m db_subnet_group_name                  = "blackbox-dev-sng"
      [32m+[0m[0m dedicated_log_volume                  = false
      [32m+[0m[0m delete_automated_backups              = true
      [32m+[0m[0m domain_fqdn                           = (known after apply)
      [32m+[0m[0m endpoint                              = (known after apply)
      [32m+[0m[0m engine                                = "postgres"
      [32m+[0m[0m engine_lifecycle_support              = (known after apply)
      [32m+[0m[0m engine_version                        = (known after apply)
      [32m+[0m[0m engine_version_actual                 = (known after apply)
      [32m+[0m[0m hosted_zone_id                        = (known after apply)
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m identifier                            = "blackbox-dev-db"
      [32m+[0m[0m identifier_prefix                     = (known after apply)
      [32m+[0m[0m instance_class                        = "db.t3.micro"
      [32m+[0m[0m iops                                  = (known after apply)
      [32m+[0m[0m kms_key_id                            = (known after apply)
      [32m+[0m[0m latest_restorable_time                = (known after apply)
      [32m+[0m[0m license_model                         = (known after apply)
      [32m+[0m[0m listener_endpoint                     = (known after apply)
      [32m+[0m[0m maintenance_window                    = (known after apply)
      [32m+[0m[0m master_user_secret                    = (known after apply)
      [32m+[0m[0m master_user_secret_kms_key_id         = (known after apply)
      [32m+[0m[0m monitoring_interval                   = 0
      [32m+[0m[0m monitoring_role_arn                   = (known after apply)
      [32m+[0m[0m multi_az                              = (known after apply)
      [32m+[0m[0m nchar_character_set_name              = (known after apply)
      [32m+[0m[0m network_type                          = (known after apply)
      [32m+[0m[0m option_group_name                     = (known after apply)
      [32m+[0m[0m parameter_group_name                  = (known after apply)
      [32m+[0m[0m password                              = (sensitive value)
      [32m+[0m[0m password_wo                           = (write-only attribute)
      [32m+[0m[0m performance_insights_enabled          = false
      [32m+[0m[0m performance_insights_kms_key_id       = (known after apply)
      [32m+[0m[0m performance_insights_retention_period = (known after apply)
      [32m+[0m[0m port                                  = (known after apply)
      [32m+[0m[0m publicly_accessible                   = false
      [32m+[0m[0m replica_mode                          = (known after apply)
      [32m+[0m[0m replicas                              = (known after apply)
      [32m+[0m[0m resource_id                           = (known after apply)
      [32m+[0m[0m skip_final_snapshot                   = true
      [32m+[0m[0m snapshot_identifier                   = (known after apply)
      [32m+[0m[0m status                                = (known after apply)
      [32m+[0m[0m storage_throughput                    = (known after apply)
      [32m+[0m[0m storage_type                          = (known after apply)
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "blackbox-dev-db"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "blackbox-dev-db"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m timezone                              = (known after apply)
      [32m+[0m[0m username                              = "devadmin"
      [32m+[0m[0m vpc_security_group_ids                = (known after apply)
    }

[1m  # module.rds.aws_db_subnet_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_db_subnet_group" "this" {
      [32m+[0m[0m arn                     = (known after apply)
      [32m+[0m[0m description             = "Managed by Terraform"
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m name                    = "blackbox-dev-sng"
      [32m+[0m[0m name_prefix             = (known after apply)
      [32m+[0m[0m subnet_ids              = (known after apply)
      [32m+[0m[0m supported_network_types = (known after apply)
      [32m+[0m[0m tags                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "blackbox-dev-sng"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all                = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "blackbox-dev-sng"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m vpc_id                  = (known after apply)
    }

[1m  # module.ssm_parameters["api_key"].aws_ssm_parameter.this[0m will be created
[0m  [32m+[0m[0m resource "aws_ssm_parameter" "this" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m data_type      = (known after apply)
      [32m+[0m[0m has_value_wo   = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m insecure_value = (known after apply)
      [32m+[0m[0m key_id         = (known after apply)
      [32m+[0m[0m name           = "/blackbox/dev/api_key"
      [32m+[0m[0m tags           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "/blackbox/dev/api_key"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "/blackbox/dev/api_key"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tier           = (known after apply)
      [32m+[0m[0m type           = "SecureString"
      [32m+[0m[0m value          = (sensitive value)
      [32m+[0m[0m value_wo       = (write-only attribute)
      [32m+[0m[0m version        = (known after apply)
    }

[1m  # module.ssm_parameters["rds_master_password"].aws_ssm_parameter.this[0m will be created
[0m  [32m+[0m[0m resource "aws_ssm_parameter" "this" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m data_type      = (known after apply)
      [32m+[0m[0m has_value_wo   = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m insecure_value = (known after apply)
      [32m+[0m[0m key_id         = (known after apply)
      [32m+[0m[0m name           = "/blackbox/dev/rds_master_password"
      [32m+[0m[0m tags           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "/blackbox/dev/rds_master_password"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "/blackbox/dev/rds_master_password"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tier           = (known after apply)
      [32m+[0m[0m type           = "SecureString"
      [32m+[0m[0m value          = (sensitive value)
      [32m+[0m[0m value_wo       = (write-only attribute)
      [32m+[0m[0m version        = (known after apply)
    }

[1m  # module.costing.module.lambda["costing-hourly-wages"].aws_cloudwatch_log_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/blackbox-dev-costing-hourly-wages"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.costing.module.lambda["costing-hourly-wages"].aws_lambda_function.this[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "this" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/base-infra/lambda/build/blackbox-dev-costing-hourly-wages.zip"
      [32m+[0m[0m function_name                  = "blackbox-dev-costing-hourly-wages"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = []
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "JxVUo2lPj3/1tCdivoVO38GSlqHlbLY1aTjNQm4iHqU="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "EXAMPLE_ENV_VAR" = "HourlyWagesLambda"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.costing.module.lambda["costing-hourly-wages-result"].aws_cloudwatch_log_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/blackbox-dev-costing-hourly-wages-result"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.costing.module.lambda["costing-hourly-wages-result"].aws_lambda_function.this[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "this" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/base-infra/lambda/build/blackbox-dev-costing-hourly-wages-result.zip"
      [32m+[0m[0m function_name                  = "blackbox-dev-costing-hourly-wages-result"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = []
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "TzV+7iSNw2fz1QQv/ygZvUDS+PLBbcjuluwylDI1uDo="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "EXAMPLE_ENV_VAR" = "HourlyWagesResultLambda"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.costing.module.lambda["costing-rfp-cost-formating"].aws_cloudwatch_log_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/blackbox-dev-costing-rfp-cost-formating"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.costing.module.lambda["costing-rfp-cost-formating"].aws_lambda_function.this[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "this" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/base-infra/lambda/build/blackbox-dev-costing-rfp-cost-formating.zip"
      [32m+[0m[0m function_name                  = "blackbox-dev-costing-rfp-cost-formating"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = []
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "DHDwkeaNmyFsKxuqaSNZFQPSRZ7BT38BAtJise4/H8Q="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "EXAMPLE_ENV_VAR" = "RfpCostFormatingLambda"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.costing.module.lambda["costing-rfp-cost-image-calculation"].aws_cloudwatch_log_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/blackbox-dev-costing-rfp-cost-image-calculation"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.costing.module.lambda["costing-rfp-cost-image-calculation"].aws_lambda_function.this[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "this" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/base-infra/lambda/build/blackbox-dev-costing-rfp-cost-image-calculation.zip"
      [32m+[0m[0m function_name                  = "blackbox-dev-costing-rfp-cost-image-calculation"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = []
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "56Iyt+J01dXPHLbnVvg0YiVUc75x+Tyn1ivoZ2B/CS8="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "EXAMPLE_ENV_VAR" = "RfpCostImageCalculationLambda"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.costing.module.lambda["costing-rfp-cost-image-extractor"].aws_cloudwatch_log_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/blackbox-dev-costing-rfp-cost-image-extractor"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.costing.module.lambda["costing-rfp-cost-image-extractor"].aws_lambda_function.this[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "this" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/base-infra/lambda/build/blackbox-dev-costing-rfp-cost-image-extractor.zip"
      [32m+[0m[0m function_name                  = "blackbox-dev-costing-rfp-cost-image-extractor"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = []
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "SFXvIX5HVqnk5zD9J+5s+j2pcyCm1QPZ4nmr5+x2xFk="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "EXAMPLE_ENV_VAR" = "RfpCostImageExtractorLambda"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.costing.module.lambda["costing-rfp-cost-regenerating"].aws_cloudwatch_log_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/blackbox-dev-costing-rfp-cost-regenerating"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.costing.module.lambda["costing-rfp-cost-regenerating"].aws_lambda_function.this[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "this" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/base-infra/lambda/build/blackbox-dev-costing-rfp-cost-regenerating.zip"
      [32m+[0m[0m function_name                  = "blackbox-dev-costing-rfp-cost-regenerating"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = []
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "MWg+D0tV/26G5SLinLA1L88eea4CI6TSSDXEyPsFnYU="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "EXAMPLE_ENV_VAR" = "RfpCostRegeneratingLambda"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.costing.module.lambda["costing-rfp-cost-summary"].aws_cloudwatch_log_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/blackbox-dev-costing-rfp-cost-summary"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.costing.module.lambda["costing-rfp-cost-summary"].aws_lambda_function.this[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "this" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/base-infra/lambda/build/blackbox-dev-costing-rfp-cost-summary.zip"
      [32m+[0m[0m function_name                  = "blackbox-dev-costing-rfp-cost-summary"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = []
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "zLC49zDduScXnLmuwamCUGF2nnvt0Rq4uuHaP90G570="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "EXAMPLE_ENV_VAR" = "RfpCostSummaryLambda"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.costing.module.lambda["costing-rfp-infrastructure"].aws_cloudwatch_log_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/blackbox-dev-costing-rfp-infrastructure"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.costing.module.lambda["costing-rfp-infrastructure"].aws_lambda_function.this[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "this" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/base-infra/lambda/build/blackbox-dev-costing-rfp-infrastructure.zip"
      [32m+[0m[0m function_name                  = "blackbox-dev-costing-rfp-infrastructure"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = []
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "MXTwSWSVt1lnNQV7drjkjn7YeXZ4lB+XySzUNyhThw4="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "EXAMPLE_ENV_VAR" = "RfpInfrastructureLambda"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.costing.module.lambda["costing-rfp-license"].aws_cloudwatch_log_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/blackbox-dev-costing-rfp-license"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.costing.module.lambda["costing-rfp-license"].aws_lambda_function.this[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "this" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/base-infra/lambda/build/blackbox-dev-costing-rfp-license.zip"
      [32m+[0m[0m function_name                  = "blackbox-dev-costing-rfp-license"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = []
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "caHvWtnu4NO4Os5yG1Xhpsw6Sho16NhL4pRgmwzCrGA="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "EXAMPLE_ENV_VAR" = "RfpLicenseLambda"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.costing.module.lambda_roles["costing-hourly-wages"].aws_iam_role.this[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "blackbox-dev-costing-hourly-wages-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.costing.module.lambda_roles["costing-hourly-wages"].aws_iam_role_policy.inline[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "inline" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "blackbox-dev-costing-hourly-wages-role-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:*:*:*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.costing.module.lambda_roles["costing-hourly-wages-result"].aws_iam_role.this[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "blackbox-dev-costing-hourly-wages-result-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.costing.module.lambda_roles["costing-hourly-wages-result"].aws_iam_role_policy.inline[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "inline" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "blackbox-dev-costing-hourly-wages-result-role-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:*:*:*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.costing.module.lambda_roles["costing-rfp-cost-formating"].aws_iam_role.this[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "blackbox-dev-costing-rfp-cost-formating-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.costing.module.lambda_roles["costing-rfp-cost-formating"].aws_iam_role_policy.inline[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "inline" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "blackbox-dev-costing-rfp-cost-formating-role-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:*:*:*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.costing.module.lambda_roles["costing-rfp-cost-image-calculation"].aws_iam_role.this[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "blackbox-dev-costing-rfp-cost-image-calculation-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.costing.module.lambda_roles["costing-rfp-cost-image-calculation"].aws_iam_role_policy.inline[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "inline" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "blackbox-dev-costing-rfp-cost-image-calculation-role-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:*:*:*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.costing.module.lambda_roles["costing-rfp-cost-image-extractor"].aws_iam_role.this[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "blackbox-dev-costing-rfp-cost-image-extractor-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.costing.module.lambda_roles["costing-rfp-cost-image-extractor"].aws_iam_role_policy.inline[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "inline" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "blackbox-dev-costing-rfp-cost-image-extractor-role-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:*:*:*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.costing.module.lambda_roles["costing-rfp-cost-regenerating"].aws_iam_role.this[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "blackbox-dev-costing-rfp-cost-regenerating-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.costing.module.lambda_roles["costing-rfp-cost-regenerating"].aws_iam_role_policy.inline[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "inline" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "blackbox-dev-costing-rfp-cost-regenerating-role-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:*:*:*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.costing.module.lambda_roles["costing-rfp-cost-summary"].aws_iam_role.this[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "blackbox-dev-costing-rfp-cost-summary-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.costing.module.lambda_roles["costing-rfp-cost-summary"].aws_iam_role_policy.inline[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "inline" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "blackbox-dev-costing-rfp-cost-summary-role-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:*:*:*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.costing.module.lambda_roles["costing-rfp-infrastructure"].aws_iam_role.this[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "blackbox-dev-costing-rfp-infrastructure-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.costing.module.lambda_roles["costing-rfp-infrastructure"].aws_iam_role_policy.inline[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "inline" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "blackbox-dev-costing-rfp-infrastructure-role-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:*:*:*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.costing.module.lambda_roles["costing-rfp-license"].aws_iam_role.this[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "blackbox-dev-costing-rfp-license-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.costing.module.lambda_roles["costing-rfp-license"].aws_iam_role_policy.inline[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "inline" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "blackbox-dev-costing-rfp-license-role-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:*:*:*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.drafting.module.lambda["drafting-company-data"].aws_cloudwatch_log_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/blackbox-dev-drafting-company-data"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.drafting.module.lambda["drafting-company-data"].aws_lambda_function.this[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "this" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/base-infra/lambda/build/blackbox-dev-drafting-company-data.zip"
      [32m+[0m[0m function_name                  = "blackbox-dev-drafting-company-data"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = []
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "reGhoS8pF7bqoJdEkRp5gRUE4cfY52fOqRjohcmjA0g="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "EXAMPLE_ENV_VAR" = "CompanyDataLambda"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.drafting.module.lambda["drafting-content-regeneration"].aws_cloudwatch_log_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/blackbox-dev-drafting-content-regeneration"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.drafting.module.lambda["drafting-content-regeneration"].aws_lambda_function.this[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "this" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/base-infra/lambda/build/blackbox-dev-drafting-content-regeneration.zip"
      [32m+[0m[0m function_name                  = "blackbox-dev-drafting-content-regeneration"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = []
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "reGhoS8pF7bqoJdEkRp5gRUE4cfY52fOqRjohcmjA0g="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "EXAMPLE_ENV_VAR" = "ContentRegenerationLambda"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.drafting.module.lambda["drafting-extract-text"].aws_cloudwatch_log_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/blackbox-dev-drafting-extract-text"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.drafting.module.lambda["drafting-extract-text"].aws_lambda_function.this[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "this" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/base-infra/lambda/build/blackbox-dev-drafting-extract-text.zip"
      [32m+[0m[0m function_name                  = "blackbox-dev-drafting-extract-text"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = []
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "reGhoS8pF7bqoJdEkRp5gRUE4cfY52fOqRjohcmjA0g="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "EXAMPLE_ENV_VAR" = "ExtractTextLambda"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.drafting.module.lambda["drafting-section-content"].aws_cloudwatch_log_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/blackbox-dev-drafting-section-content"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.drafting.module.lambda["drafting-section-content"].aws_lambda_function.this[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "this" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/base-infra/lambda/build/blackbox-dev-drafting-section-content.zip"
      [32m+[0m[0m function_name                  = "blackbox-dev-drafting-section-content"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = []
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "reGhoS8pF7bqoJdEkRp5gRUE4cfY52fOqRjohcmjA0g="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "EXAMPLE_ENV_VAR" = "SectionContentLambda"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.drafting.module.lambda["drafting-summary"].aws_cloudwatch_log_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/blackbox-dev-drafting-summary"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.drafting.module.lambda["drafting-summary"].aws_lambda_function.this[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "this" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/base-infra/lambda/build/blackbox-dev-drafting-summary.zip"
      [32m+[0m[0m function_name                  = "blackbox-dev-drafting-summary"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = []
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "reGhoS8pF7bqoJdEkRp5gRUE4cfY52fOqRjohcmjA0g="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "EXAMPLE_ENV_VAR" = "SummaryLambda"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.drafting.module.lambda["drafting-system-summary"].aws_cloudwatch_log_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/blackbox-dev-drafting-system-summary"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.drafting.module.lambda["drafting-system-summary"].aws_lambda_function.this[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "this" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/base-infra/lambda/build/blackbox-dev-drafting-system-summary.zip"
      [32m+[0m[0m function_name                  = "blackbox-dev-drafting-system-summary"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = []
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "reGhoS8pF7bqoJdEkRp5gRUE4cfY52fOqRjohcmjA0g="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "EXAMPLE_ENV_VAR" = "SystemSummaryLambda"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.drafting.module.lambda["drafting-table-of-content"].aws_cloudwatch_log_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/blackbox-dev-drafting-table-of-content"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.drafting.module.lambda["drafting-table-of-content"].aws_lambda_function.this[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "this" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/base-infra/lambda/build/blackbox-dev-drafting-table-of-content.zip"
      [32m+[0m[0m function_name                  = "blackbox-dev-drafting-table-of-content"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = []
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "reGhoS8pF7bqoJdEkRp5gRUE4cfY52fOqRjohcmjA0g="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "EXAMPLE_ENV_VAR" = "TableOfContentLambda"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.drafting.module.lambda["drafting-toc-enrichment"].aws_cloudwatch_log_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/blackbox-dev-drafting-toc-enrichment"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.drafting.module.lambda["drafting-toc-enrichment"].aws_lambda_function.this[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "this" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/base-infra/lambda/build/blackbox-dev-drafting-toc-enrichment.zip"
      [32m+[0m[0m function_name                  = "blackbox-dev-drafting-toc-enrichment"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = []
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "reGhoS8pF7bqoJdEkRp5gRUE4cfY52fOqRjohcmjA0g="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "EXAMPLE_ENV_VAR" = "TocEnrichmentLambda"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.drafting.module.lambda["drafting-toc-regenerate"].aws_cloudwatch_log_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/blackbox-dev-drafting-toc-regenerate"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.drafting.module.lambda["drafting-toc-regenerate"].aws_lambda_function.this[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "this" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/base-infra/lambda/build/blackbox-dev-drafting-toc-regenerate.zip"
      [32m+[0m[0m function_name                  = "blackbox-dev-drafting-toc-regenerate"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = []
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "reGhoS8pF7bqoJdEkRp5gRUE4cfY52fOqRjohcmjA0g="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "EXAMPLE_ENV_VAR" = "TocRegenerateLambda"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.drafting.module.lambda["drafting-user-preference"].aws_cloudwatch_log_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/blackbox-dev-drafting-user-preference"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.drafting.module.lambda["drafting-user-preference"].aws_lambda_function.this[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "this" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/base-infra/lambda/build/blackbox-dev-drafting-user-preference.zip"
      [32m+[0m[0m function_name                  = "blackbox-dev-drafting-user-preference"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = []
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "reGhoS8pF7bqoJdEkRp5gRUE4cfY52fOqRjohcmjA0g="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "EXAMPLE_ENV_VAR" = "UserPreferenceLambda"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.drafting.module.lambda_roles["drafting-company-data"].aws_iam_role.this[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "blackbox-dev-drafting-company-data-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.drafting.module.lambda_roles["drafting-company-data"].aws_iam_role_policy.inline[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "inline" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "blackbox-dev-drafting-company-data-role-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:*:*:*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.drafting.module.lambda_roles["drafting-content-regeneration"].aws_iam_role.this[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "blackbox-dev-drafting-content-regeneration-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.drafting.module.lambda_roles["drafting-content-regeneration"].aws_iam_role_policy.inline[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "inline" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "blackbox-dev-drafting-content-regeneration-role-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:*:*:*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.drafting.module.lambda_roles["drafting-extract-text"].aws_iam_role.this[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "blackbox-dev-drafting-extract-text-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.drafting.module.lambda_roles["drafting-extract-text"].aws_iam_role_policy.inline[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "inline" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "blackbox-dev-drafting-extract-text-role-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:*:*:*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.drafting.module.lambda_roles["drafting-section-content"].aws_iam_role.this[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "blackbox-dev-drafting-section-content-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.drafting.module.lambda_roles["drafting-section-content"].aws_iam_role_policy.inline[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "inline" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "blackbox-dev-drafting-section-content-role-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:*:*:*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.drafting.module.lambda_roles["drafting-summary"].aws_iam_role.this[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "blackbox-dev-drafting-summary-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.drafting.module.lambda_roles["drafting-summary"].aws_iam_role_policy.inline[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "inline" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "blackbox-dev-drafting-summary-role-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:*:*:*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.drafting.module.lambda_roles["drafting-system-summary"].aws_iam_role.this[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "blackbox-dev-drafting-system-summary-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.drafting.module.lambda_roles["drafting-system-summary"].aws_iam_role_policy.inline[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "inline" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "blackbox-dev-drafting-system-summary-role-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:*:*:*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.drafting.module.lambda_roles["drafting-table-of-content"].aws_iam_role.this[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "blackbox-dev-drafting-table-of-content-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.drafting.module.lambda_roles["drafting-table-of-content"].aws_iam_role_policy.inline[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "inline" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "blackbox-dev-drafting-table-of-content-role-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:*:*:*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.drafting.module.lambda_roles["drafting-toc-enrichment"].aws_iam_role.this[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "blackbox-dev-drafting-toc-enrichment-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.drafting.module.lambda_roles["drafting-toc-enrichment"].aws_iam_role_policy.inline[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "inline" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "blackbox-dev-drafting-toc-enrichment-role-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:*:*:*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.drafting.module.lambda_roles["drafting-toc-regenerate"].aws_iam_role.this[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "blackbox-dev-drafting-toc-regenerate-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.drafting.module.lambda_roles["drafting-toc-regenerate"].aws_iam_role_policy.inline[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "inline" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "blackbox-dev-drafting-toc-regenerate-role-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:*:*:*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.drafting.module.lambda_roles["drafting-user-preference"].aws_iam_role.this[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "blackbox-dev-drafting-user-preference-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.drafting.module.lambda_roles["drafting-user-preference"].aws_iam_role_policy.inline[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "inline" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "blackbox-dev-drafting-user-preference-role-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:*:*:*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.sourcing.module.cloudfront.aws_cloudfront_distribution.this[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudfront_distribution" "this" {
      [32m+[0m[0m arn                             = (known after apply)
      [32m+[0m[0m caller_reference                = (known after apply)
      [32m+[0m[0m continuous_deployment_policy_id = (known after apply)
      [32m+[0m[0m default_root_object             = "index.html"
      [32m+[0m[0m domain_name                     = (known after apply)
      [32m+[0m[0m enabled                         = true
      [32m+[0m[0m etag                            = (known after apply)
      [32m+[0m[0m hosted_zone_id                  = (known after apply)
      [32m+[0m[0m http_version                    = "http2"
      [32m+[0m[0m id                              = (known after apply)
      [32m+[0m[0m in_progress_validation_batches  = (known after apply)
      [32m+[0m[0m is_ipv6_enabled                 = false
      [32m+[0m[0m last_modified_time              = (known after apply)
      [32m+[0m[0m price_class                     = "PriceClass_100"
      [32m+[0m[0m retain_on_delete                = false
      [32m+[0m[0m staging                         = false
      [32m+[0m[0m status                          = (known after apply)
      [32m+[0m[0m tags                            = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m trusted_key_groups              = (known after apply)
      [32m+[0m[0m trusted_signers                 = (known after apply)
      [32m+[0m[0m wait_for_deployment             = true

      [32m+[0m[0m default_cache_behavior {
          [32m+[0m[0m allowed_methods        = [
              [32m+[0m[0m "GET",
              [32m+[0m[0m "HEAD",
            ]
          [32m+[0m[0m cached_methods         = [
              [32m+[0m[0m "GET",
              [32m+[0m[0m "HEAD",
            ]
          [32m+[0m[0m compress               = false
          [32m+[0m[0m default_ttl            = (known after apply)
          [32m+[0m[0m max_ttl                = (known after apply)
          [32m+[0m[0m min_ttl                = 0
          [32m+[0m[0m target_origin_id       = "S3-blackbox-dev-sourcing-rfp-files"
          [32m+[0m[0m trusted_key_groups     = (known after apply)
          [32m+[0m[0m trusted_signers        = (known after apply)
          [32m+[0m[0m viewer_protocol_policy = "redirect-to-https"

          [32m+[0m[0m forwarded_values {
              [32m+[0m[0m headers                 = (known after apply)
              [32m+[0m[0m query_string            = false
              [32m+[0m[0m query_string_cache_keys = (known after apply)

              [32m+[0m[0m cookies {
                  [32m+[0m[0m forward           = "none"
                  [32m+[0m[0m whitelisted_names = (known after apply)
                }
            }

          [32m+[0m[0m grpc_config (known after apply)
        }

      [32m+[0m[0m origin {
          [32m+[0m[0m connection_attempts      = 3
          [32m+[0m[0m connection_timeout       = 10
          [32m+[0m[0m domain_name              = "blackbox-dev-sourcing-rfp-files.s3.amazonaws.com"
          [32m+[0m[0m origin_id                = "S3-blackbox-dev-sourcing-rfp-files"
            [90m# (2 unchanged attributes hidden)[0m[0m
        }

      [32m+[0m[0m restrictions {
          [32m+[0m[0m geo_restriction {
              [32m+[0m[0m locations        = (known after apply)
              [32m+[0m[0m restriction_type = "none"
            }
        }

      [32m+[0m[0m viewer_certificate {
          [32m+[0m[0m cloudfront_default_certificate = true
          [32m+[0m[0m minimum_protocol_version       = "TLSv1"
        }
    }

[1m  # module.sourcing.module.eventbridge.aws_cloudwatch_event_rule.cron_daily[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_rule" "cron_daily" {
      [32m+[0m[0m arn                 = (known after apply)
      [32m+[0m[0m event_bus_name      = "default"
      [32m+[0m[0m force_destroy       = false
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m name                = "blackbox-dev-daily-trigger-sourcing-lambda-1"
      [32m+[0m[0m name_prefix         = (known after apply)
      [32m+[0m[0m schedule_expression = "cron(0 1 * * ? *)"
      [32m+[0m[0m tags                = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all            = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.sourcing.module.eventbridge.aws_cloudwatch_event_target.cron_daily_target[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_target" "cron_daily_target" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m rule           = "blackbox-dev-daily-trigger-sourcing-lambda-1"
      [32m+[0m[0m target_id      = "lambda-1-daily"
    }

[1m  # module.sourcing.module.eventbridge.aws_lambda_permission.allow_eventbridge_to_invoke[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_permission" "allow_eventbridge_to_invoke" {
      [32m+[0m[0m action              = "lambda:InvokeFunction"
      [32m+[0m[0m function_name       = (known after apply)
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m principal           = "events.amazonaws.com"
      [32m+[0m[0m source_arn          = (known after apply)
      [32m+[0m[0m statement_id        = "AllowExecutionFromEventBridge"
      [32m+[0m[0m statement_id_prefix = (known after apply)
    }

[1m  # module.sourcing.module.lambda["sourcing-lambda-1"].aws_cloudwatch_log_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/blackbox-dev-sourcing-lambda-1"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.sourcing.module.lambda["sourcing-lambda-1"].aws_lambda_function.this[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "this" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/base-infra/lambda/build/blackbox-dev-sourcing-lambda-1.zip"
      [32m+[0m[0m function_name                  = "blackbox-dev-sourcing-lambda-1"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = []
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "reGhoS8pF7bqoJdEkRp5gRUE4cfY52fOqRjohcmjA0g="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "EXAMPLE_ENV_VAR" = "Sourcing-Lambda-1"
              [32m+[0m[0m "S3_BUCKET_NAME"  = "blackbox-dev-sourcing-rfp-files"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.sourcing.module.lambda["sourcing-lambda-2"].aws_cloudwatch_log_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/blackbox-dev-sourcing-lambda-2"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.sourcing.module.lambda["sourcing-lambda-2"].aws_lambda_function.this[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "this" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/base-infra/lambda/build/blackbox-dev-sourcing-lambda-2.zip"
      [32m+[0m[0m function_name                  = "blackbox-dev-sourcing-lambda-2"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = []
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "EColoO0anConh/GcicybQmDbdHdV9R2Wu4ZOyTM7Dqs="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = (known after apply)
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.sourcing.module.lambda["sourcing-lambda-3"].aws_cloudwatch_log_group.this[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/blackbox-dev-sourcing-lambda-3"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
    }

[1m  # module.sourcing.module.lambda["sourcing-lambda-3"].aws_lambda_function.this[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "this" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/base-infra/lambda/build/blackbox-dev-sourcing-lambda-3.zip"
      [32m+[0m[0m function_name                  = "blackbox-dev-sourcing-lambda-3"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = []
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "/p4EvWqp1MoEesn0b3WvXduE/+9Hcvuq3B71gGsiJHM="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = (known after apply)
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.sourcing.module.lambda_roles["sourcing-lambda-1"].aws_iam_role.this[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "blackbox-dev-sourcing-lambda-1-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.sourcing.module.lambda_roles["sourcing-lambda-1"].aws_iam_role_policy.inline[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "inline" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "blackbox-dev-sourcing-lambda-1-role-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:PutObject",
                          [32m+[0m[0m "s3:GetObject",
                          [32m+[0m[0m "s3:DeleteObject",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:s3:::blackbox-dev-sourcing-rfp-files/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "lambda:InvokeFunction",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:lambda:*:*:function:blackbox-dev-lambda_*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:*:*:*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.sourcing.module.lambda_roles["sourcing-lambda-2"].aws_iam_role.this[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "blackbox-dev-sourcing-lambda-2-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.sourcing.module.lambda_roles["sourcing-lambda-2"].aws_iam_role_policy.inline[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "inline" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "blackbox-dev-sourcing-lambda-2-role-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "rds-data:*",
                          [32m+[0m[0m "rds-db:connect",
                          [32m+[0m[0m "rds:DescribeDBInstances",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:*:*:*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.sourcing.module.lambda_roles["sourcing-lambda-3"].aws_iam_role.this[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "blackbox-dev-sourcing-lambda-3-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.sourcing.module.lambda_roles["sourcing-lambda-3"].aws_iam_role_policy.inline[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "inline" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "blackbox-dev-sourcing-lambda-3-role-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:GetObject",
                          [32m+[0m[0m "s3:PutObject",
                          [32m+[0m[0m "s3:DeleteObject",
                          [32m+[0m[0m "s3:ListBucket",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:s3:::blackbox-dev-sourcing-rfp-files",
                          [32m+[0m[0m "arn:aws:s3:::blackbox-dev-sourcing-rfp-files/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "rds-data:*",
                          [32m+[0m[0m "rds-db:connect",
                          [32m+[0m[0m "rds:DescribeDBInstances",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "cloudfront:CreateInvalidation",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:logs:*:*:*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.sourcing.module.s3.aws_s3_bucket.mys3bucket[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "mys3bucket" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "blackbox-dev-sourcing-rfp-files"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "blackbox-dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "blackbox-dev"
          [32m+[0m[0m "Project"     = "blackbox"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)

      [32m+[0m[0m cors_rule (known after apply)

      [32m+[0m[0m grant (known after apply)

      [32m+[0m[0m lifecycle_rule (known after apply)

      [32m+[0m[0m logging (known after apply)

      [32m+[0m[0m object_lock_configuration (known after apply)

      [32m+[0m[0m replication_configuration (known after apply)

      [32m+[0m[0m server_side_encryption_configuration (known after apply)

      [32m+[0m[0m versioning (known after apply)

      [32m+[0m[0m website (known after apply)
    }

[1mPlan:[0m 127 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m cdn_domain_name              = (known after apply)
  [32m+[0m[0m costing_lambda_arns          = {
      [32m+[0m[0m costing-hourly-wages               = (known after apply)
      [32m+[0m[0m costing-hourly-wages-result        = (known after apply)
      [32m+[0m[0m costing-rfp-cost-formating         = (known after apply)
      [32m+[0m[0m costing-rfp-cost-image-calculation = (known after apply)
      [32m+[0m[0m costing-rfp-cost-image-extractor   = (known after apply)
      [32m+[0m[0m costing-rfp-cost-regenerating      = (known after apply)
      [32m+[0m[0m costing-rfp-cost-summary           = (known after apply)
      [32m+[0m[0m costing-rfp-infrastructure         = (known after apply)
      [32m+[0m[0m costing-rfp-license                = (known after apply)
    }
  [32m+[0m[0m drafting_lambda_arns         = {
      [32m+[0m[0m drafting-company-data         = (known after apply)
      [32m+[0m[0m drafting-content-regeneration = (known after apply)
      [32m+[0m[0m drafting-extract-text         = (known after apply)
      [32m+[0m[0m drafting-section-content      = (known after apply)
      [32m+[0m[0m drafting-summary              = (known after apply)
      [32m+[0m[0m drafting-system-summary       = (known after apply)
      [32m+[0m[0m drafting-table-of-content     = (known after apply)
      [32m+[0m[0m drafting-toc-enrichment       = (known after apply)
      [32m+[0m[0m drafting-toc-regenerate       = (known after apply)
      [32m+[0m[0m drafting-user-preference      = (known after apply)
    }
  [32m+[0m[0m elasticache_cluster_endpoint = (known after apply)
  [32m+[0m[0m eventbridge_rule_arn         = (known after apply)
  [32m+[0m[0m rds_database_endpoint        = (known after apply)
  [32m+[0m[0m sourcing_s3_bucket           = "blackbox-dev-sourcing-rfp-files"
  [32m+[0m[0m ssm_parameter_names          = {
      [32m+[0m[0m api_key             = "/blackbox/dev/api_key"
      [32m+[0m[0m rds_master_password = "/blackbox/dev/rds_master_password"
    }
  [32m+[0m[0m vpc_id                       = (known after apply)
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
