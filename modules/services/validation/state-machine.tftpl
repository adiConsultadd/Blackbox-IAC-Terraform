{
  "Comment": "Run four Lambdas in parallel, then check for application-level failures, and execute final Lambda.",
  "StartAt": "Parallel",
  "States": {
    "Parallel": {
      "Type": "Parallel",
      "Next": "CheckForErrors",
      "Branches": [
        {
          "StartAt": "technical-check",
          "States": {
            "technical-check": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${tech_req_lambda_arn}",
                "Payload.$": "$"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "legal-check",
          "States": {
            "legal-check": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${legal_req_lambda_arn}",
                "Payload.$": "$"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "date-extractor",
          "States": {
            "date-extractor": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${date_extractor_lambda_arn}",
                "Payload.$": "$"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "checklist-check",
          "States": {
            "checklist-check": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${checklist_lambda_arn}",
                "Payload.$": "$"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "ExecutionFailed"
        }
      ]
    },
    "CheckForErrors": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$[0].statusCode",
          "NumericGreaterThanEquals": 300,
          "Next": "ExecutionFailed"
        },
        {
          "Variable": "$[1].statusCode",
          "NumericGreaterThanEquals": 300,
          "Next": "ExecutionFailed"
        },
        {
          "Variable": "$[2].statusCode",
          "NumericGreaterThanEquals": 300,
          "Next": "ExecutionFailed"
        },
        {
          "Variable": "$[3].statusCode",
          "NumericGreaterThanEquals": 300,
          "Next": "ExecutionFailed"
        }
      ],
      "Default": "check-completed"
    },
    "check-completed": {
      "Type": "Succeed"
    },
    "ExecutionFailed": {
      "Type": "Fail",
      "Error": "ApplicationError",
      "Cause": "One of the parallel steps returned a non-success status code (>= 300)."
    }
  }
}